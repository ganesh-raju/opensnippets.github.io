{"version":3,"sources":["redux/elements/types.js","redux/elements/reducer.js","redux/root-reducer.js","redux/store.js","redux/elements/actions.js","app/notification/notification.js","app/re-usable/form.js","app/invoices/new/new.js","layout/nav/nav.js","app/main/main.js","app/clients/clients.js","app/invoices/invoices.js","App.js","serviceWorker.js","index.js"],"names":["elementTypes","SHOW_FORM","SHOW_NOTIFICATIONS","INITIAL_STATE","hide_new_modal","hide_notification_modal","elemtsReducer","state","action","type","rootReducer","combineReducers","elements","elementsReducer","middlewares","logger","store","createStore","applyMiddleware","hideNewPage","hideNotification","connect","dispatch","className","onClick","Form","label","otherParams","name","required","withRouter","hiddenNewPage","hiddenNotifications","history","path","location","pathname","to","size","pose","main","Component","Clinets","Invoices","App","exact","component","Main","Clients","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2dae893.chunk.js","sourcesContent":["const elementTypes = {\n    SHOW_FORM: 'SHOW_FORM',\n    SHOW_NOTIFICATIONS: 'SHOW_NOTIFICATIONS'\n}\n\nexport default elementTypes;","import elementTypes from \"./types\";\nconst INITIAL_STATE = {\n    hide_new_modal: true,\n    hide_notification_modal: true\n}\n\nconst elemtsReducer = function(state=INITIAL_STATE, action){\n    switch(action.type){\n        case elementTypes.SHOW_FORM :\n            return{\n                ...state,\n                hide_new_modal: !state.hide_new_modal\n            }\n        case elementTypes.SHOW_NOTIFICATIONS:\n            return{\n                ...state,\n                hide_notification_modal: !state.hide_notification_modal\n            }\n        default:\n            return state\n    }\n}\n\nexport default elemtsReducer;","import { combineReducers } from \"redux\";\n\nimport elementsReducer from \"./elements/reducer\";\n\nconst rootReducer = combineReducers({\n    elements: elementsReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\n\nimport logger from 'redux-logger';\nimport rootReducer from \"./root-reducer\";\n\nconst middlewares = [logger]\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\n","import elementTypes from \"./types\";\n\nexport const hideNewPage = () => ({\n    type: elementTypes.SHOW_FORM\n})\nexport const hideNotification = () => ({\n    type: elementTypes.SHOW_NOTIFICATIONS\n})","import React from 'react';\nimport { connect } from \"react-redux\";\n\nimport { hideNotification } from \"../../redux/elements/actions\";\n\nimport \"./notification.scss\";\n\nconst notification = ({hideNotification}) => {\n    return (\n        <div className='notification'>\n            <div className='header'>\n                <div className='title'>\n                    Notifications\n                </div>\n                <div className='close' onClick={hideNotification}>\n                    <span className='pointer'>X</span>\n                </div>\n            </div>\n            <div className='body'>\n                Body\n            </div>\n        </div>\n    )\n};\n\nconst mapDispatchToProps = dispatch => ({\n    hideNotification: () => dispatch(hideNotification())\n})\nexport default connect(null, mapDispatchToProps)(notification);\n","import React from 'react';\n\nimport './form.scss';\n\nconst Form = ({label, ...otherParams}) => {\n    return (\n        <div className='form-field'>\n            <input {...otherParams} className='form-field-input' />\n            <label className='form-field-label'>{label}</label>\n        </div>\n    )\n};\n\nexport default Form;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Form from \"../../re-usable/form\";\n\n\nimport { hideNewPage } from \"../../../redux/elements/actions\";\n\nimport \"./new.scss\";\n\nconst New = ({hideNewPage}) => {\n    return (\n        <div className='new'>\n            <div className='header'>\n                <div className='modal_title'>\n                    New Invoice\n                </div>\n                <div className='close_modal'>\n                    <span onClick={hideNewPage} className='pointer'>\n                        X\n                    </span>\n                </div>\n            </div>\n            <div className='body'>\n                <form>\n                    <Form type='text' name='username' label='User name' required />\n                    \n                    <Form type='number' name='amount' label='Amount' required />\n                    <Form type='text' name='organization' label='Orgnization' required />\n                    <Form type='date' name='due-date' label='' required />\n                    <Form type='text' name='status' label='Payment status' required />\n                </form>\n            </div>\n        </div>\n    )\n};\n\nconst mapDispatchToProps = dispatch => ({\n    hideNewPage: () => dispatch(hideNewPage())\n})\n\nexport default connect(null, mapDispatchToProps)(New);","import React from 'react'\nimport { FaRegBell, FaAtom, FaPlus, FaUser, FaAngleDown } from \"react-icons/fa\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\n\nimport { hideNewPage, hideNotification } from \"../../redux/elements/actions\";\n\nimport Notification from \"../../app/notification/notification\";\nimport New from \"../../app/invoices/new/new\";\nimport \"./nav.scss\";\n\nconst nav = ({history, hiddenNewPage, hideNewPage, hideNotification, hiddenNotifications}) => {\n    const path = history.location.pathname;\n    return (\n        <nav>\n           <div className='header'>\n                <h3><Link to='/'><FaAtom size='2em' /></Link></h3>\n           </div> \n           <div className='middle_items'>\n                <ul>\n                    <li><Link to='/' className={`${path === '/'? 'active' : ''}`}>Main</Link></li>\n                    <li><Link to='/invoices' className={`${path === '/invoices'? 'active' : ''}`}>Invoices</Link></li>\n                    <li><Link to='/clients' className={`${path === '/clients'? 'active' : ''}`}>Clients</Link></li>\n                </ul>\n           </div>\n           <div className='right_items'>\n                <ul>\n                    <li onClick={hideNewPage}><span className='white_bg_button pointer'><FaPlus size='0.8em' />  New Invoice</span></li>\n                    <li onClick={hideNotification} className='pointer'><span className='notifications'><FaRegBell /></span></li>\n                    <li><span className='pointer'><FaUser /> <FaAngleDown /></span></li>\n                </ul>\n           </div>\n           {\n            hiddenNotifications ? null :  <Notification pose={hiddenNotifications ? 'open' : 'closed' } />\n           }\n          \n           {\n            hiddenNewPage ? null : <New />\n           }\n           \n        </nav>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        hiddenNewPage: state.elements.hide_new_modal,\n        hiddenNotifications: state.elements.hide_notification_modal\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    hideNewPage: () => dispatch(hideNewPage()),\n    hideNotification: () => dispatch(hideNotification())\n\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(nav));\n","import React, { Component } from 'react'\nimport \"./main.scss\";\n\nclass main extends Component {\n    render() {\n        return (\n            <div>\n                Main\n            </div>\n        )\n    }\n};\n\nexport default  main;","import React, { Component } from 'react';\n\nclass Clinets extends Component {\n  render() {\n    return (\n      <div className='clients'>\n        Clients\n      </div>\n    );\n  }\n};\n\nexport default Clinets;\n","import React, { Component } from 'react';\n\nclass Invoices extends Component {\n  render() {\n    return (\n      <div className='invoices'>\n        Invoices\n      </div>\n    );\n  }\n};\n\nexport default Invoices;\n","import React from 'react';\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Nav from \"./layout/nav/nav\";\nimport Main from \"./app/main/main\";\nimport Clients from \"./app/clients/clients\";\nimport Invoices from \"./app/invoices/invoices\";\n\nimport './global/styles/reset.scss';\nimport './global/styles/elements.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <div className=\"App\">\n          <Nav />\n          <div className=\"main\">\n            <Route exact path=\"/\" component={Main} />\n            <Route exact path=\"/clients\" component={Clients} />\n            <Route exact path=\"/invoices\" component={Invoices} />\n          </div>\n        </div>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}